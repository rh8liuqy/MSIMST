// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// phiX_c
NumericMatrix phiX_c(const NumericVector& Xbeta, const NumericVector& u, int L);
RcppExport SEXP _MSIMST_phiX_c(SEXP XbetaSEXP, SEXP uSEXP, SEXP LSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type Xbeta(XbetaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type u(uSEXP);
    Rcpp::traits::input_parameter< int >::type L(LSEXP);
    rcpp_result_gen = Rcpp::wrap(phiX_c(Xbeta, u, L));
    return rcpp_result_gen;
END_RCPP
}
// cs_inv_c
arma::mat cs_inv_c(double dsq, double sigmasq, int n);
RcppExport SEXP _MSIMST_cs_inv_c(SEXP dsqSEXP, SEXP sigmasqSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type dsq(dsqSEXP);
    Rcpp::traits::input_parameter< double >::type sigmasq(sigmasqSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(cs_inv_c(dsq, sigmasq, n));
    return rcpp_result_gen;
END_RCPP
}
// b_func_c
double b_func_c(double nu);
RcppExport SEXP _MSIMST_b_func_c(SEXP nuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    rcpp_result_gen = Rcpp::wrap(b_func_c(nu));
    return rcpp_result_gen;
END_RCPP
}
// cs_det_c
double cs_det_c(double dsq, double sigmasq, int n);
RcppExport SEXP _MSIMST_cs_det_c(SEXP dsqSEXP, SEXP sigmasqSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type dsq(dsqSEXP);
    Rcpp::traits::input_parameter< double >::type sigmasq(sigmasqSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(cs_det_c(dsq, sigmasq, n));
    return rcpp_result_gen;
END_RCPP
}
// mvt_lpdf_c
double mvt_lpdf_c(NumericVector x_vec, NumericVector mu_vec, arma::mat Sigma_inv, double Sigma_det, double nu);
RcppExport SEXP _MSIMST_mvt_lpdf_c(SEXP x_vecSEXP, SEXP mu_vecSEXP, SEXP Sigma_invSEXP, SEXP Sigma_detSEXP, SEXP nuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x_vec(x_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu_vec(mu_vecSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Sigma_inv(Sigma_invSEXP);
    Rcpp::traits::input_parameter< double >::type Sigma_det(Sigma_detSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    rcpp_result_gen = Rcpp::wrap(mvt_lpdf_c(x_vec, mu_vec, Sigma_inv, Sigma_det, nu));
    return rcpp_result_gen;
END_RCPP
}
// mst_lpdf_c
double mst_lpdf_c(NumericVector x_vec, NumericVector loc_value, double dsq, double sigmasq, double delta, double nu);
RcppExport SEXP _MSIMST_mst_lpdf_c(SEXP x_vecSEXP, SEXP loc_valueSEXP, SEXP dsqSEXP, SEXP sigmasqSEXP, SEXP deltaSEXP, SEXP nuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x_vec(x_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type loc_value(loc_valueSEXP);
    Rcpp::traits::input_parameter< double >::type dsq(dsqSEXP);
    Rcpp::traits::input_parameter< double >::type sigmasq(sigmasqSEXP);
    Rcpp::traits::input_parameter< double >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    rcpp_result_gen = Rcpp::wrap(mst_lpdf_c(x_vec, loc_value, dsq, sigmasq, delta, nu));
    return rcpp_result_gen;
END_RCPP
}
// Dbeta
NumericMatrix Dbeta(int L, NumericVector t);
RcppExport SEXP _MSIMST_Dbeta(SEXP LSEXP, SEXP tSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type L(LSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type t(tSEXP);
    rcpp_result_gen = Rcpp::wrap(Dbeta(L, t));
    return rcpp_result_gen;
END_RCPP
}
// rtmvnormHMC
NumericMatrix rtmvnormHMC(int n, const NumericVector& mu, const NumericMatrix& Sigma, const NumericVector& x_init, const NumericMatrix& ff, const NumericVector& gg, int n_burn);
RcppExport SEXP _MSIMST_rtmvnormHMC(SEXP nSEXP, SEXP muSEXP, SEXP SigmaSEXP, SEXP x_initSEXP, SEXP ffSEXP, SEXP ggSEXP, SEXP n_burnSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type Sigma(SigmaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type x_init(x_initSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type ff(ffSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gg(ggSEXP);
    Rcpp::traits::input_parameter< int >::type n_burn(n_burnSEXP);
    rcpp_result_gen = Rcpp::wrap(rtmvnormHMC(n, mu, Sigma, x_init, ff, gg, n_burn));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_MSIMST_phiX_c", (DL_FUNC) &_MSIMST_phiX_c, 3},
    {"_MSIMST_cs_inv_c", (DL_FUNC) &_MSIMST_cs_inv_c, 3},
    {"_MSIMST_b_func_c", (DL_FUNC) &_MSIMST_b_func_c, 1},
    {"_MSIMST_cs_det_c", (DL_FUNC) &_MSIMST_cs_det_c, 3},
    {"_MSIMST_mvt_lpdf_c", (DL_FUNC) &_MSIMST_mvt_lpdf_c, 5},
    {"_MSIMST_mst_lpdf_c", (DL_FUNC) &_MSIMST_mst_lpdf_c, 6},
    {"_MSIMST_Dbeta", (DL_FUNC) &_MSIMST_Dbeta, 2},
    {"_MSIMST_rtmvnormHMC", (DL_FUNC) &_MSIMST_rtmvnormHMC, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_MSIMST(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
